type CarImage {
  url: String!
  isFeatured: Boolean!
  caption: String
  uploadedBy: User!
  uploadedAt: DateTime!
}

input CarInput {
  make: String
  carModel: String
  year: Int
  price: Float
  engineType: EngineType
  transmission: TransmissionType
  power: Float
  acceleration: Float
  status: CarStatus
  specs: CarSpecsInput
  images: [String]
  rating: Float
}

input CarSpecsInput {
  engine: EngineInput
  performance: PerformanceInput
  chassis: ChassisInput
  dimensions: DimensionsInput
  transmission: TransmissionDetailsInput
  fuel: FuelInput
  interior: InteriorInput
  safety: SafetyInput
  technology: TechnologyInput
  warranty: WarrantyInput
  features: FeaturesInput
}

input EngineInput {
  displacement: Float
  cylinders: Int
  configuration: String
  fuelInjection: String
  turbocharger: Boolean
  supercharger: Boolean
  compression: String
  valvesPerCylinder: Int
  valveSystem: String
  aspiration: String
  boostPressure: Float
  redlineRpm: Int
  idleRpm: Int
  position: String
  orientation: String
  engineType: EngineType
  powerOutput: Float
  type: String
}

input PerformanceInput {
  powerToWeight: Float
  powerToWeightRatio: Float
  topSpeed: Float
  acceleration060: Float
  acceleration0100: Float
  quarterMile: Float
  quarterMileSpeed: Float
  brakingDistance60_0: Float
  brakingDistance: Float
  lateralG: Float
  nurburgringTime: String
  passingAcceleration: Float
  elasticity: Float
  launchControl: Boolean
  performanceMode: [String]
}

input ChassisInput {
  bodyType: String
  platform: String
  frontSuspension: String
  rearSuspension: String
  frontBrakes: String
  rearBrakes: String
  wheelSize: String
  tireSize: String
}

input DimensionsInput {
  length: Float
  width: Float
  height: Float
  wheelbase: Float
  groundClearance: Float
  dragCoefficient: Float
  weight: Float
  distribution: String
}

input TransmissionDetailsInput {
  type: TransmissionType
  gears: Int
  clutchType: ClutchType
  driveType: DriveType
  differential: String
}

input FuelInput {
  fuelType: String
  fuelSystem: String
  tankCapacity: Float
  cityMPG: Float
  highwayMPG: Float
  combinedMPG: Float
  emissionClass: String
}

input InteriorInput {
  seatingCapacity: Int
  doors: Int
  trunkCapacity: Float
  infotainmentScreen: String
  soundSystem: String
  climateZones: Int
  upholsteryMaterial: String
}

input SafetyInput {
  airbags: String
  abs: Boolean
  stabilityControl: Boolean
  tractionControl: Boolean
  parkingSensors: Boolean
  camera: String
  blindSpotMonitoring: Boolean
  laneDepartureWarning: Boolean
  collisionWarning: Boolean
  nightVision: Boolean
}

input TechnologyInput {
  infotainmentSystem: String
  screenSize: Float
  appleCarPlay: Boolean
  androidAuto: Boolean
  adaptiveCruiseControl: Boolean
  laneKeepAssist: Boolean
  blindSpotMonitoring: Boolean
  parkingAssist: Boolean
  nightVision: Boolean
  headUpDisplay: Boolean
  surroundViewCamera: Boolean
  digitalKey: Boolean
  mobileApp: Boolean
  overTheAirUpdates: Boolean
  voiceControl: Boolean
  voiceAssistantName: String
  connectivity: ConnectivityFeaturesInput
  smartphone: [String]
  navigation: String
  headlightType: String
  keylessEntry: Boolean
  startSystem: String
  driverAssistance: [String]
  bluetooth: Boolean
  wirelessCharging: Boolean
  wifi: Boolean
  soundSystem: String
  speakers: Int
}

input ConnectivityFeaturesInput {
  bluetooth: Boolean
  wirelessCharging: Boolean
  wifi: Boolean
  soundSystem: String
  speakers: Int
}

input WarrantyInput {
  basic: String
  powertrain: String
  corrosion: String
  roadside: String
  maintenance: String
}

input FeaturesInput {
  comfort: [String]
  safety: [String]
  performance: [String]
  technology: [String]
  exterior: [String]
  interior: [String]
}

type AdminMutation {
  createCar(input: CarInput!): Car!
  updateCar(id: ID!, input: CarInput!): Car!
  uploadCarImage(carId: ID!, image: Upload!, caption: String, isFeatured: Boolean!): Car!
  deleteCarImage(carId: ID!, imageUrl: String!): Car!
  updateCarStatus(carId: ID!, status: CarStatus!): Car!
  deleteCar(id: ID!): DeleteCarResponse!
}

enum CarStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EngineType {
  GASOLINE
  DIESEL
  ELECTRIC
  HYBRID
  HYDROGEN
  PLUG_IN_HYBRID
}

enum TransmissionType {
  MANUAL
  AUTOMATIC
  SEMI_AUTOMATIC
  CVT
}

enum ClutchType {
  MANUAL
  AUTOMATIC
}

enum DriveType {
  FRONT_WHEEL_DRIVE
  REAR_WHEEL_DRIVE
  ALL_WHEEL_DRIVE
  FOUR_WHEEL_DRIVE
}

type DeleteCarResponse {
  success: Boolean!
  message: String!
}

type AdminQuery {
  adminCars: [Car!]!
}

extend type Query {
  admin: AdminQuery!
}

extend type Mutation {
  admin: AdminMutation!
}
