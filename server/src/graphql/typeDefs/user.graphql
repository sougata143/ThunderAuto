type User {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  role: UserRole!
  preferences: UserPreferences!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserPreferences {
  theme: Theme!
  notifications: Boolean!
  language: String!
}

enum UserRole {
  GUEST
  USER
  ADMIN
}

enum Theme {
  light
  dark
}

extend type Query {
  me: User
  user(id: ID!): User
  users: [User!]!
}

extend type Mutation {
  updateUserPreferences(theme: Theme, notifications: Boolean, language: String): User!
  updateUserRole(userId: ID!, role: UserRole!): User!
  registerUser(input: RegisterUserInput!): AuthPayload!
  loginUser(input: LoginUserInput!): AuthPayload!
  createGuestUser: AuthPayload!
  upgradeGuestUser(input: RegisterUserInput!): AuthPayload!
  updateUser(input: UpdateUserInput!): User!
}

input RegisterUserInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  firstName: String
  lastName: String
  email: String
  password: String
  preferences: UserPreferencesInput
}

input UserPreferencesInput {
  theme: Theme
  notifications: Boolean
  language: String
}

type AuthPayload {
  token: String!
  user: User!
}
